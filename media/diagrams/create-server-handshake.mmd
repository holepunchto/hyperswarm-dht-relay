sequenceDiagram
  participant N as Node
  participant R as Relay

  note left of N: opening = Map { 1: { Server { alias: 1 } } }

  N->>R: listen { alias: 1, publicKey: <Buffer ...> }

  note right of R: servers = Map { 1: Server { alias: 2 } }

  R-->>N: listening { alias: 2, remoteAlias: 1, host: '<ip>', port: <port> }

  note left of N: servers = Map { 2: Server { alias: 1 } }

  loop
    note right of R: connecting = Map { 3: { Server { alias: 3, handshake: Handshake { } } } }

    R->>N: connection { alias: 3, serverAlias: 2 }

    R->>N: handshakeReceive { alias: 3, data: <Buffer ...> }

    alt
      N-->>R: destroy { remoteAlias: 3 }
    else
      note left of N: connections = Map { 3: Socket { alias: 4, handshake: Handshake { } } }

      N-->>R: accept { alias: 4, remoteAlias: 3 }

      note right of R: connections = Map { 4: Socket { alias: 3, handshake: Handshake { } } }

      N-->>R: handshakeReply { alias: 4, data: <Buffer ...>, remotePublicKey: <Buffer ...> }

      R->>N: handshakeSend { alias: 3, data: <Buffer ...> }

      N-->>R: handshakeReply { alias: 4, data: <Buffer ...>, remoteId: <Buffer ...>, holepunchSecret: <Buffer ...> }

      R->>N: connected { alias: 3 }
    end
  end
